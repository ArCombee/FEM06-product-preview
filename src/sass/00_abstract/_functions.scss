@use "sass:math";
@use "sass:list";

//https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Round numbers
@function round($value, $digits: 1) {
  $unit: unit($value);
  $multiply: math.pow(10, $digits);
  $result: math.div(math.round(strip-unit($value) * $multiply), $multiply);
  @if ($unit != "") {
    $result: $result + #{$unit};
  }
  @return $result;
}
// Number devide by 2
@function half($value) {
  @return math.div($value, 2);
}
@function neg($value) {
  @return $value * -1;
}

// Convert rems to PX
@function rem-to-px($rem, $digits: 2, $px-base: 16) {
  $value: strip-unit($rem) * strip-unit($px-base);
  $value: round($value, $digits);
  @return $value * 1px;
}
//Convert px to rem
@function px-to-rem($px, $digits: 2, $px-base: 16) {
  $value: math.div(strip-unit($px), strip-unit($px-base));
  $value: round($value, $digits);
  @return $value * 1rem;
}
// Creates darker version of color by adding black
@function shade($color, $percentage) {
  @return adjust-color($color, $blackness: $percentage);
}
// Creates lighter version of color by adding white
@function tint($color, $percentage) {
  @return adjust-color($color, $whiteness: $percentage);
}
// Replace text
@function str-replace($string, $search, $replace: "") {
  $string: #{$string};
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}
// Calculate ideal line height
@function line-height($font-size: 16px, $line-height: 24px, $rem2px: 16) {
  $unit-fs: unit($font-size);
  $unit-lh: unit($line-height);
  $fs: strip-unit($font-size);
  $lh: strip-unit($line-height);
  @if ($unit-fs == "rem") {
    $fs: $fs * $rem2px;
  }
  @if ($unit-lh == "rem") {
    $lh: $lh * $rem2px;
  }
  @return r(math.div($lh, $fs), 3);
}
@function generate-font-sizes($ratio, $number, $prefix: "") {
  $font-size: ();
  @for $i from ($number * -1) through $number {
    $fs: math.pow($ratio, $i) * 1rem;
    $fs: f.round($fs, 2);
    $font-size: map.set($font-size, $prefix + $i, $fs);
  }
  @return $font-size;
}
@function fluid(
  $min-size,
  $max-size,
  $ms: 1,
  $ratio-min: 1.25,
  $ratio-max: 1.25,
  $min-breakpoint: 320px,
  $max-breakpoint: 1240px,
  $unit: vw
) {
  $min-size: math.pow($ratio-min, $ms) * $min-size;
  $max-size: math.pow($ratio-max, $ms) * $max-size;
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: round($slope * 100, 4);
  $intercept-rem: round(px-to-rem($min-size - $slope * $min-breakpoint), 4);
  $min-size-rem: round(px-to-rem($min-size), 4);
  $max-size-rem: round(px-to-rem($max-size), 4);
  @return clamp(
    #{$min-size-rem},
    #{$intercept-rem} + #{$slope-to-unit}#{$unit},
    #{$max-size-rem}
  );
}
@function create-scale($ratio: 1.25, $start: -3, $end: 5) {
  $scale: "";
  @for $i from $start through $end {
    $value: round(math.pow($ratio, $i), 3);
    @if ($scale == "") {
      $scale: $value;
    } @else {
      $scale: list.append($scale, $value, comma);
    }
  }
  @return $scale;
}

@function get-config-item($config, $item, $rule) {
  @return map-get(map-get($config, $item), $rule);
}
